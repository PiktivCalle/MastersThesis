languageModels:
  - model: "deepseek/deepseek-r1-distill-qwen-1.5b"
    provider: "openRouter"
  - model: "deepseek/deepseek-r1-distill-llama-8b"
    provider: "openRouter"
  - model: "gpt-4o"
    provider: "openAi"
  - model: "microsoft/phi-4"
    provider: "openRouter"
  - model: "google/gemma-3-27b-it"
    provider: "openRouter"
  - model: "meta-llama/llama-3.2-1b-instruct"
    provider: "openRouter"
  - model: "meta-llama/llama-4-maverick"
    provider: "openRouter"
  - model: "gpt-4o-mini"
    provider: "openAi"
  - model: "claude-3-7-sonnet-20250219"
    provider: "anthropic"
  - model: "gemini-2.5-pro-preview-03-25"
    provider: "google"

embeddingModels:
  - model: "text-embedding-3-large"
    is_open_ai: true
evaluationExamples:
  - prompt: "How many three way intersections are there on the map?"
    memoryItems:
      - prompt: "Retrieve one lane pair where one precedes the next"
        query: |
          MATCH 
            (prev:Lane {lane_type: 'driving'})-[:PRECEDES]->(next:Lane {lane_type: 'driving'})
          
          RETURN 
            [prev.id, next.id] AS lane_ids
          
          LIMIT 1;
      - prompt: "How many junctions have three connected roads?"
        query: |
          MATCH 
            // Find two roads with their respective lanes. The first road precedes the second
            (r1:Road)-[:HAS_LANE]->(l1:Lane {lane_type: 'driving'})-[:PRECEDES]->(l2:Lane {lane_type: 'driving'})-[:ON_ROAD]->(r2:Road)
          
          WHERE
            // Makes sure that the second road is part of a junction 
            r2.junctionId <> '-1'
          
          WITH 
            // Count the roads going into the junction
            r2.junctionId AS junction, COUNT(DISTINCT r1) AS incomingCount
          
          WHERE 
            // Make sure there are three connecting roads
            incomingCount = 3
          
          RETURN 
            // Count the junctions which have three connecting roads
            COUNT(DISTINCT junction) AS intersections_with_three_connected_roads;
      - prompt: "How many roads have 2 lanes?"
        query: |
          MATCH 
            // Find all lanes which are on a road
            (l:Lane {lane_type: 'driving'})-[:ON_ROAD]->(r:Road)
          
          WITH 
            // Count the lanes for each road
            COUNT(DISTINCT l) AS lane_count, r
          
          WHERE 
            // Make sure that the road has two lanes
            lane_count = 2
          
          RETURN 
            // Count roads which have two lanes
            COUNT(r) AS roads_with_two_lanes;

  - prompt: "How many roads are turning but are not part of a junction? Take into account that some roads vary slightly in their heading but are still considered straight. Headings are represented in radians."
    memoryItems:
      - prompt: "Find roads which are not part of a junction"
        query: |
          MATCH 
            (r1:Road)
          
          WHERE 
            r1.junctionId = '-1'
          
          RETURN 
            r1.id;
      - prompt: "Compute how much each road turns"
        query: |
          MATCH 
            // Find each road
            (r1:Road)
          
          WITH 
            // Calculates the difference in heading with values measured in radians. 
            (r1.finalHeading - r1.initialHeading) AS heading_difference, r1
          
          RETURN 
            heading_difference, r1.id AS road_id;
      - prompt: "Which roads are turning?"
        query: |
          MATCH 
            // Find each road
            (r1:Road)
          
          WITH 
            // Calculates the difference in heading with values measured in radians. 
            (r1.finalHeading - r1.initialHeading) AS heading_difference, r1
          
          WHERE 
            // Calculation to see if the road is turning or not. cos(...)-1 > .. filters out each road which has a heading difference close to 0 (straight road).
            abs(cos(heading_difference) - 1) > 0.01
          
          RETURN 
            heading_difference, r1.id AS road_id;

  - prompt: "Give me one set of 3 roads where the first road is at the most 45m long with a preceding left turning road that is part of an intersection turn and the road after the intersection being at least 150m long. I want the road IDS in a list."
    memoryItems:
      - prompt: "Get every road and one of its lanes"
        query: |
          MATCH 
            (r1:Road)-[:HAS_LANE]->(l1:Lane {lane_type: 'driving'})
          
          RETURN 
            r1.id AS road_id, l1.id AS lane_id;
      - prompt: "Find two lanes, the second being part of a junction. Return the road ids of the roads that the lanes are on, as well as the respective lane ids."
        query: |
          MATCH 
            // Find the two lanes
            (l1:Lane {lane_type: 'driving'})-[:PRECEDES]->(l2:Lane {lane_type: 'driving'})
          
          MATCH 
            // Find the first road
            (l1)-[:ON_ROAD]->(r1:Road)

          MATCH 
            // Find the second road
            (l2)-[:ON_ROAD]->(r2:Road)

          WHERE
            // Make sure that the second road is part of a junction
            r2.junctionId <> '-1'

          RETURN 
            // Return the road ids and the lane ids
            [r1.id, r2.id] as road_ids, [l1.id, l2.id] as lane_ids

          LIMIT 1
      - prompt: "Find three roads that connect to each other"
        query: |
          MATCH 
            (r1:Road)-[:HAS_LANE]->(l1:Lane {lane_type: 'driving'})-[:PRECEDES]->(l2:Lane {lane_type: 'driving'})-[:PRECEDES]->(l3:Lane {lane_type: 'driving'})

          MATCH 
            // Find the second road
            (l2)-[:ON_ROAD]->(r2:Road)

          MATCH 
            // Find the third road
            (l3)-[:ON_ROAD]->(r3:Road)

          RETURN 
            [r1.id, r2.id, r3.id] AS road_ids;
      - prompt: "Find two roads of different lengths. The roads should be connected by a junction without a turn. Return all road ids"
        query: |
          // Find the first road which is not a junction
          MATCH 
            (r1:Road {junctionId: '-1'})-[:HAS_LANE]->(l1:Lane {lane_type: 'driving'})
  
          // Find the junction lane connection which should not be a turn
          MATCH
            (l1)-[:PRECEDES {direction: 'straight'}]->(l2:Lane {lane_type: 'driving'})

          // Find the road corresponding to the junction lane
          MATCH
            (l2)-[:ON_ROAD]->(r2:Road)

          // Find the road going out of the junction
          MATCH
            (l2)-[:PRECEDES]->(l3:Lane {lane_type: 'driving'})-[:ON_ROAD]->(r3:Road)

          // Make sure the roads before and after the junction are of different lengths and that the second road is part of a junction
          WHERE 
            r1.length <> r3.length
            AND r2.junctionId <> '-1' 

          // Collect road ids in a list
          RETURN 
            [r1.id, r2.id, r3.id] AS road_ids

          LIMIT 1;

  - prompt: "Give me a route which is between 400 and 500 meters long, involves at least two turns, minimum of one being a left turn. The route should have at least 1 traffic sign which changes the speed on the road. Return the ids of the roads in the route."
    memoryItems:
      - prompt: "Find a connected route with 3-10 different roads"
        query: |
          MATCH 
            (start:Road)
          
          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels. More than 10 in maxLevel makes the search take a long time and is not required.
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path

          RETURN 
            // Return the found path
            path

          LIMIT 1;
      - prompt: "Output the roads which are part of a route consisting of 3-10 different roads"
        query: |
          MATCH 
            (start:Road)
          
          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path

          WITH 
            // Loop through each node in the path
            [ x IN nodes(path)
              // Extract all lane nodes
              WHERE 
                // Make sure that the node is a lane
                'Lane' IN labels(x)
                // Make sure that the lane is a driving lane
                AND x.lane_type = 'driving'
            ] AS lanes

          WITH
            // Loop through each lane node
            [ l IN lanes
              | head(
                  // Extract the road that the lane is on
                  [ (l)-[:ON_ROAD]->(r)
                    | r
                  ]
                )
            ] AS roads

          RETURN 
            roads
            
          LIMIT 1;
      - prompt: "Find a route consisting of 3-10 different roads which has at least one traffic sign setting the driving speed"
        query: |
          MATCH 
            (start:Road)

          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path

          WITH 
            // Loop through each node in the path
            [ x IN nodes(path)
              // Extract all lane nodes
              WHERE 
                // Make sure that the node is a lane
                'Lane' IN labels(x)
                // Make sure that the lane is a driving lane
                AND x.lane_type = 'driving'
            ] AS lanes

          WITH
            // Loop through each lane node
            [ l IN lanes
              | head(
                  // Extract the road that the lane is on
                  [ (l)-[:ON_ROAD]->(r)
                    | r
                  ]
                )
            ] AS roads

          WHERE 
            ANY(r IN roads WHERE EXISTS {
             (r)-[:HAS_OBJECT]->(o:Object) WHERE o.name CONTAINS 'Speed' 
            })

          RETURN 
            roads

          LIMIT 1;
      - prompt: "Output the turn direction of each connection in a route consisting of 3-10 different roads"
        query: |
          MATCH 
            (start:Road)
          
          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path
          
          WITH 
            // Extract every 'PRECEDES' relationship from the path and save the direction property in a variable called 'directions'
            [r IN relationships(path) WHERE type(r) = 'PRECEDES' | r.direction] AS directions
          
          RETURN 
            directions
          
          LIMIT 1;
      - prompt: "Output the total length of a route consisting of 3-10 different roads which is at least 600m long"
        query: |
          MATCH 
            (start:Road)
          
          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path
          
          WITH 
            // Loop through each node in the path
            [ x IN nodes(path)
              WHERE 
                // Make sure that the node is a lane
                'Lane' IN labels(x)
                // Make sure that the lane is a driving lane
                AND x.lane_type = 'driving'
              
            ] AS lanes

          WITH
            // Loop through each lane node
            [ l IN lanes
              | head(
                  // Extract the road that the lane is on
                  [ (l)-[:ON_ROAD]->(r)
                    | r
                  ]
                )
            ] AS roads
          
          WITH 
            // Loop through every road and sum the length. Save the total sum in a variable called 'totalLength'
            reduce(total = 0, r IN roads | total + r.length) AS totalLength
          
          WHERE 
            // Make sure that the total length of the road is over 600
            totalLength >= 600
          
          RETURN 
            totalLength
          
          LIMIT 1;
      - prompt: "Find a route consisting of 3-10 different roads which has at least three turns with at least one being a right turn"
        query: |
          MATCH 
            (start:Road)
          
          // Set up the config for the search
          CALL apoc.path.expandConfig(
            // Enter the starting node
            start,
            {
              // Set up the relationship filter, only HAS_LANE> and PRECEDES> relationships are required
              relationshipFilter: 'HAS_LANE>|PRECEDES>',

              // Minimum of 3 nodes
              minLevel: '3',

              // Maximum of 10 levels
              maxLevel: '10',

              // BFS enabled to get correct results
              bfs: 'true',

              // Make sure that there are no circular dependencies
              uniqueness: 'NODE_PATH'
            }
          ) YIELD path
          
          WITH 
            path,
            // Extract every PRECEDES relationship from the path and save the direction property in a variable called 'directions'
            [r IN relationships(path) WHERE type(r) = 'PRECEDES' | r.direction] AS directions
          
          WHERE 
            // Make sure that there are at least two occurences of 'left' and/or 'right' in the 'directions' variable
            size([d IN directions WHERE d IN ['left','right']]) >= 2
            // Make sure that there is an occurence of 'right' in the 'directions' variable
            AND 'right' IN directions
          
          RETURN 
            path

          LIMIT 1;
